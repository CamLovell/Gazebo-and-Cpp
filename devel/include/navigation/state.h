// Generated by gencpp from file navigation/state.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_STATE_H
#define NAVIGATION_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : N(0.0)
    , E(0.0)
    , psi(0.0)
    , u(0.0)
    , v(0.0)
    , r(0.0)  {
    }
  state_(const ContainerAllocator& _alloc)
    : N(0.0)
    , E(0.0)
    , psi(0.0)
    , u(0.0)
    , v(0.0)
    , r(0.0)  {
  (void)_alloc;
    }



   typedef double _N_type;
  _N_type N;

   typedef double _E_type;
  _E_type E;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _u_type;
  _u_type u;

   typedef double _v_type;
  _v_type v;

   typedef double _r_type;
  _r_type r;





  typedef boost::shared_ptr< ::navigation::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::navigation::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::navigation::state > statePtr;
typedef boost::shared_ptr< ::navigation::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation::state_<ContainerAllocator1> & lhs, const ::navigation::state_<ContainerAllocator2> & rhs)
{
  return lhs.N == rhs.N &&
    lhs.E == rhs.E &&
    lhs.psi == rhs.psi &&
    lhs.u == rhs.u &&
    lhs.v == rhs.v &&
    lhs.r == rhs.r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation::state_<ContainerAllocator1> & lhs, const ::navigation::state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::navigation::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "571db7e1a9de92532ecdf36e8286b584";
  }

  static const char* value(const ::navigation::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x571db7e1a9de9253ULL;
  static const uint64_t static_value2 = 0x2ecdf36e8286b584ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/state";
  }

  static const char* value(const ::navigation::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 N\n"
"float64 E\n"
"float64 psi\n"
"float64 u\n"
"float64 v\n"
"float64 r\n"
;
  }

  static const char* value(const ::navigation::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.N);
      stream.next(m.E);
      stream.next(m.psi);
      stream.next(m.u);
      stream.next(m.v);
      stream.next(m.r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::state_<ContainerAllocator>& v)
  {
    s << indent << "N: ";
    Printer<double>::stream(s, indent + "  ", v.N);
    s << indent << "E: ";
    Printer<double>::stream(s, indent + "  ", v.E);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "u: ";
    Printer<double>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_STATE_H
